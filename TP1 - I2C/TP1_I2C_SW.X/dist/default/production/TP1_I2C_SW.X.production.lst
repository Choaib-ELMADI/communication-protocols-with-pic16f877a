

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Sat Apr 12 13:23:54 2025

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    10                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	text10,local,class=CODE,merge=1,delta=2
    19                           	psect	text11,local,class=CODE,merge=1,delta=2
    20                           	psect	text12,local,class=CODE,merge=1,delta=2
    21                           	psect	text13,local,class=CODE,merge=1,delta=2
    22                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    23                           	dabs	1,0x7E,2
    24     0000                     
    25                           ; Generated 22/03/2023 GMT
    26                           ; 
    27                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution. Publication is not required when
    41                           ;        this file is used in an embedded application.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC16F877A Definitions
    57                           ; 
    58                           ; SFR Addresses
    59     0000                     	;# 
    60     0001                     	;# 
    61     0002                     	;# 
    62     0003                     	;# 
    63     0004                     	;# 
    64     0005                     	;# 
    65     0006                     	;# 
    66     0007                     	;# 
    67     0008                     	;# 
    68     0009                     	;# 
    69     000A                     	;# 
    70     000B                     	;# 
    71     000C                     	;# 
    72     000D                     	;# 
    73     000E                     	;# 
    74     000E                     	;# 
    75     000F                     	;# 
    76     0010                     	;# 
    77     0011                     	;# 
    78     0012                     	;# 
    79     0013                     	;# 
    80     0014                     	;# 
    81     0015                     	;# 
    82     0015                     	;# 
    83     0016                     	;# 
    84     0017                     	;# 
    85     0018                     	;# 
    86     0019                     	;# 
    87     001A                     	;# 
    88     001B                     	;# 
    89     001B                     	;# 
    90     001C                     	;# 
    91     001D                     	;# 
    92     001E                     	;# 
    93     001F                     	;# 
    94     0081                     	;# 
    95     0085                     	;# 
    96     0086                     	;# 
    97     0087                     	;# 
    98     0088                     	;# 
    99     0089                     	;# 
   100     008C                     	;# 
   101     008D                     	;# 
   102     008E                     	;# 
   103     0091                     	;# 
   104     0092                     	;# 
   105     0093                     	;# 
   106     0094                     	;# 
   107     0098                     	;# 
   108     0099                     	;# 
   109     009C                     	;# 
   110     009D                     	;# 
   111     009E                     	;# 
   112     009F                     	;# 
   113     010C                     	;# 
   114     010D                     	;# 
   115     010E                     	;# 
   116     010F                     	;# 
   117     018C                     	;# 
   118     018D                     	;# 
   119     0000                     	;# 
   120     0001                     	;# 
   121     0002                     	;# 
   122     0003                     	;# 
   123     0004                     	;# 
   124     0005                     	;# 
   125     0006                     	;# 
   126     0007                     	;# 
   127     0008                     	;# 
   128     0009                     	;# 
   129     000A                     	;# 
   130     000B                     	;# 
   131     000C                     	;# 
   132     000D                     	;# 
   133     000E                     	;# 
   134     000E                     	;# 
   135     000F                     	;# 
   136     0010                     	;# 
   137     0011                     	;# 
   138     0012                     	;# 
   139     0013                     	;# 
   140     0014                     	;# 
   141     0015                     	;# 
   142     0015                     	;# 
   143     0016                     	;# 
   144     0017                     	;# 
   145     0018                     	;# 
   146     0019                     	;# 
   147     001A                     	;# 
   148     001B                     	;# 
   149     001B                     	;# 
   150     001C                     	;# 
   151     001D                     	;# 
   152     001E                     	;# 
   153     001F                     	;# 
   154     0081                     	;# 
   155     0085                     	;# 
   156     0086                     	;# 
   157     0087                     	;# 
   158     0088                     	;# 
   159     0089                     	;# 
   160     008C                     	;# 
   161     008D                     	;# 
   162     008E                     	;# 
   163     0091                     	;# 
   164     0092                     	;# 
   165     0093                     	;# 
   166     0094                     	;# 
   167     0098                     	;# 
   168     0099                     	;# 
   169     009C                     	;# 
   170     009D                     	;# 
   171     009E                     	;# 
   172     009F                     	;# 
   173     010C                     	;# 
   174     010D                     	;# 
   175     010E                     	;# 
   176     010F                     	;# 
   177     018C                     	;# 
   178     018D                     	;# 
   179     0008                     _PORTD	set	8
   180     0006                     _PORTBbits	set	6
   181     0013                     _SSPBUF	set	19
   182     000C                     _PIR1bits	set	12
   183     0014                     _SSPCON	set	20
   184     0094                     _SSPSTATbits	set	148
   185     0091                     _SSPCON2bits	set	145
   186     0093                     _SSPADD	set	147
   187     0087                     _TRISCbits	set	135
   188     0088                     _TRISD	set	136
   189     0086                     _TRISBbits	set	134
   190                           
   191                           	psect	strings
   192     0003                     __pstrings:
   193     0003                     stringtab:
   194     0003                     __stringtab:
   195     0003                     stringcode:	
   196                           ;	String table - string pointers are 1 byte each
   197                           
   198     0003                     stringdir:
   199     0003  3000               	movlw	high stringdir
   200     0004  008A               	movwf	10
   201     0005  0804               	movf	4,w
   202     0006  0A84               	incf	4,f
   203     0007  0782               	addwf	2,f
   204     0008                     __stringbase:
   205     0008  3400               	retlw	0
   206     0009                     __end_of__stringtab:
   207     0009                     STR_2:
   208     0009  3452               	retlw	82	;'R'
   209     000A  3465               	retlw	101	;'e'
   210     000B  3463               	retlw	99	;'c'
   211     000C  3465               	retlw	101	;'e'
   212     000D  3469               	retlw	105	;'i'
   213     000E  3476               	retlw	118	;'v'
   214     000F  3465               	retlw	101	;'e'
   215     0010  343A               	retlw	58	;':'
   216     0011  3420               	retlw	32	;' '
   217     0012  3400               	retlw	0
   218     0013                     STR_1:
   219     0013  3453               	retlw	83	;'S'
   220     0014  3465               	retlw	101	;'e'
   221     0015  346E               	retlw	110	;'n'
   222     0016  3464               	retlw	100	;'d'
   223     0017  343A               	retlw	58	;':'
   224     0018  3420               	retlw	32	;' '
   225     0019  3400               	retlw	0
   226                           
   227                           	psect	cinit
   228     07FC                     start_initialization:	
   229                           ; #config settings
   230                           
   231     07FC                     __initialization:
   232     07FC                     end_of_initialization:	
   233                           ;End of C runtime variable initialization code
   234                           
   235     07FC                     __end_of__initialization:
   236     07FC  0183               	clrf	3
   237     07FD  120A  118A  2E5D   	ljmp	_main	;jump to C main() function
   238                           
   239                           	psect	cstackCOMMON
   240     0070                     __pcstackCOMMON:
   241     0070                     ?_LCD_Init:
   242     0070                     ?_LCD_Control:	
   243                           ; 1 bytes @ 0x0
   244                           
   245     0070                     ??_LCD_Control:	
   246                           ; 1 bytes @ 0x0
   247                           
   248     0070                     ?_I2C_Init:	
   249                           ; 1 bytes @ 0x0
   250                           
   251     0070                     ?_Start_Bit:	
   252                           ; 1 bytes @ 0x0
   253                           
   254     0070                     ??_Start_Bit:	
   255                           ; 1 bytes @ 0x0
   256                           
   257     0070                     ?_Send_Byte_Data:	
   258                           ; 1 bytes @ 0x0
   259                           
   260     0070                     ??_Send_Byte_Data:	
   261                           ; 1 bytes @ 0x0
   262                           
   263     0070                     ?_Stop_Bit:	
   264                           ; 1 bytes @ 0x0
   265                           
   266     0070                     ??_Stop_Bit:	
   267                           ; 1 bytes @ 0x0
   268                           
   269     0070                     ?_LCD_Print_Byte:	
   270                           ; 1 bytes @ 0x0
   271                           
   272     0070                     ??_LCD_Print_Byte:	
   273                           ; 1 bytes @ 0x0
   274                           
   275     0070                     ?_Repeated_Start:	
   276                           ; 1 bytes @ 0x0
   277                           
   278     0070                     ??_Repeated_Start:	
   279                           ; 1 bytes @ 0x0
   280                           
   281     0070                     ?_Receive_Byte_Data:	
   282                           ; 1 bytes @ 0x0
   283                           
   284     0070                     ??_Receive_Byte_Data:	
   285                           ; 1 bytes @ 0x0
   286                           
   287     0070                     ?_Send_NACK_Bit:	
   288                           ; 1 bytes @ 0x0
   289                           
   290     0070                     ??_Send_NACK_Bit:	
   291                           ; 1 bytes @ 0x0
   292                           
   293     0070                     ?_main:	
   294                           ; 1 bytes @ 0x0
   295                           
   296     0070                     ?___awdiv:	
   297                           ; 1 bytes @ 0x0
   298                           
   299     0070                     Send_Byte_Data@data:	
   300                           ; 2 bytes @ 0x0
   301                           
   302     0070                     I2C_Init@clock_init_value:	
   303                           ; 1 bytes @ 0x0
   304                           
   305     0070                     ___awdiv@divisor:	
   306                           ; 2 bytes @ 0x0
   307                           
   308                           
   309                           ; 2 bytes @ 0x0
   310     0070                     	ds	2
   311     0072                     ??_I2C_Init:
   312     0072                     LCD_Print_Byte@data:	
   313                           ; 1 bytes @ 0x2
   314                           
   315     0072                     LCD_Control@cmd:	
   316                           ; 1 bytes @ 0x2
   317                           
   318     0072                     ___awdiv@dividend:	
   319                           ; 1 bytes @ 0x2
   320                           
   321                           
   322                           ; 2 bytes @ 0x2
   323     0072                     	ds	1
   324     0073                     ??_LCD_Init:
   325     0073                     ?_LCD_Print_Bytes:	
   326                           ; 1 bytes @ 0x3
   327                           
   328     0073                     LCD_Print_Bytes@len:	
   329                           ; 1 bytes @ 0x3
   330                           
   331                           
   332                           ; 1 bytes @ 0x3
   333     0073                     	ds	1
   334     0074                     ??_LCD_Print_Bytes:
   335     0074                     ??___awdiv:	
   336                           ; 1 bytes @ 0x4
   337                           
   338     0074                     LCD_Print_Bytes@str:	
   339                           ; 1 bytes @ 0x4
   340                           
   341     0074                     ___awdiv@counter:	
   342                           ; 1 bytes @ 0x4
   343                           
   344                           
   345                           ; 1 bytes @ 0x4
   346     0074                     	ds	1
   347     0075                     LCD_Print_Bytes@i:
   348     0075                     ___awdiv@sign:	
   349                           ; 1 bytes @ 0x5
   350                           
   351                           
   352                           ; 1 bytes @ 0x5
   353     0075                     	ds	1
   354     0076                     ___awdiv@quotient:
   355                           
   356                           ; 2 bytes @ 0x6
   357     0076                     	ds	2
   358     0078                     ?___awmod:
   359     0078                     ___awmod@divisor:	
   360                           ; 2 bytes @ 0x8
   361                           
   362                           
   363                           ; 2 bytes @ 0x8
   364     0078                     	ds	2
   365     007A                     ___awmod@dividend:
   366                           
   367                           ; 2 bytes @ 0xA
   368     007A                     	ds	2
   369     007C                     ??___awmod:
   370     007C                     ___awmod@counter:	
   371                           ; 1 bytes @ 0xC
   372                           
   373                           
   374                           ; 1 bytes @ 0xC
   375     007C                     	ds	1
   376     007D                     ___awmod@sign:
   377                           
   378                           ; 1 bytes @ 0xD
   379     007D                     	ds	1
   380                           
   381                           	psect	cstackBANK0
   382     0020                     __pcstackBANK0:
   383     0020                     ??_main:
   384                           
   385                           ; 1 bytes @ 0x0
   386     0020                     	ds	3
   387     0023                     main@slave_address_r:
   388                           
   389                           ; 1 bytes @ 0x3
   390     0023                     	ds	1
   391     0024                     main@slave_address_w:
   392                           
   393                           ; 1 bytes @ 0x4
   394     0024                     	ds	1
   395     0025                     main@memor_address_h:
   396                           
   397                           ; 1 bytes @ 0x5
   398     0025                     	ds	1
   399     0026                     main@memor_address_l:
   400                           
   401                           ; 1 bytes @ 0x6
   402     0026                     	ds	1
   403     0027                     main@received_data:
   404                           
   405                           ; 1 bytes @ 0x7
   406     0027                     	ds	1
   407     0028                     main@data_to_write:
   408                           
   409                           ; 1 bytes @ 0x8
   410     0028                     	ds	1
   411                           
   412                           	psect	maintext
   413     065D                     __pmaintext:	
   414 ;;
   415 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   416 ;;
   417 ;; *************** function _main *****************
   418 ;; Defined at:
   419 ;;		line 32 in file "main.c"
   420 ;; Parameters:    Size  Location     Type
   421 ;;		None
   422 ;; Auto vars:     Size  Location     Type
   423 ;;  clock_init_v    2    0        int 
   424 ;;  data_to_writ    1    8[BANK0 ] unsigned char 
   425 ;;  received_dat    1    7[BANK0 ] unsigned char 
   426 ;;  memor_addres    1    6[BANK0 ] unsigned char 
   427 ;;  memor_addres    1    5[BANK0 ] unsigned char 
   428 ;;  slave_addres    1    4[BANK0 ] unsigned char 
   429 ;;  slave_addres    1    3[BANK0 ] unsigned char 
   430 ;; Return value:  Size  Location     Type
   431 ;;                  1    wreg      void 
   432 ;; Registers used:
   433 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   434 ;; Tracked objects:
   435 ;;		On entry : B00/0
   436 ;;		On exit  : 0/0
   437 ;;		Unchanged: 0/0
   438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   439 ;;      Params:         0       0       0       0       0
   440 ;;      Locals:         0       6       0       0       0
   441 ;;      Temps:          0       3       0       0       0
   442 ;;      Totals:         0       9       0       0       0
   443 ;;Total ram usage:        9 bytes
   444 ;; Hardware stack levels required when called: 2
   445 ;; This function calls:
   446 ;;		_I2C_Init
   447 ;;		_LCD_Control
   448 ;;		_LCD_Init
   449 ;;		_LCD_Print_Byte
   450 ;;		_LCD_Print_Bytes
   451 ;;		_Receive_Byte_Data
   452 ;;		_Repeated_Start
   453 ;;		_Send_Byte_Data
   454 ;;		_Send_NACK_Bit
   455 ;;		_Start_Bit
   456 ;;		_Stop_Bit
   457 ;;		___awdiv
   458 ;;		___awmod
   459 ;; This function is called by:
   460 ;;		Startup code after reset
   461 ;; This function uses a non-reentrant model
   462 ;;
   463                           
   464     065D                     _main:	
   465                           ;psect for function _main
   466                           
   467     065D                     l999:	
   468                           ;incstack = 0
   469                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   470                           
   471                           
   472                           ;main.c: 33: 
   473     065D  1683               	bsf	3,5	;RP0=1, select bank1
   474     065E  1303               	bcf	3,6	;RP1=0, select bank1
   475     065F  1186               	bcf	6,3	;volatile
   476                           
   477                           ;main.c: 34:     int clock_init_value = 49;
   478     0660  1206               	bcf	6,4	;volatile
   479                           
   480                           ;main.c: 35:     I2C_Init(clock_init_value);
   481     0661  1286               	bcf	6,5	;volatile
   482     0662                     l1001:
   483                           
   484                           ;main.c: 36: 
   485     0662  0188               	clrf	8	;volatile
   486     0663                     l1003:
   487                           
   488                           ;main.c: 38:     uint8_t slave_address_r = 0b10100001;
   489     0663  1587               	bsf	7,3	;volatile
   490     0664                     l1005:
   491                           
   492                           ;main.c: 39:     uint8_t memor_address_h = 0x11;
   493     0664  1607               	bsf	7,4	;volatile
   494     0665                     l1007:
   495                           
   496                           ;main.c: 41: 
   497     0665  120A  118A  2569  120A  118A  	fcall	_LCD_Init
   498     066A                     l1009:
   499                           
   500                           ;main.c: 43:     uint8_t received_data = 0x00;
   501     066A  3080               	movlw	128
   502     066B  120A  118A  2529  120A  118A  	fcall	_LCD_Control
   503     0670                     l1011:
   504                           
   505                           ;main.c: 44: 
   506     0670  3006               	movlw	6
   507     0671  00F3               	movwf	LCD_Print_Bytes@len
   508     0672  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   509     0673  120A  118A  2582  120A  118A  	fcall	_LCD_Print_Bytes
   510     0678                     l1013:
   511                           
   512                           ;main.c: 45:     while (1) {
   513     0678  30C0               	movlw	192
   514     0679  120A  118A  2529  120A  118A  	fcall	_LCD_Control
   515     067E                     l1015:
   516                           
   517                           ;main.c: 46:         Start_Bit();
   518     067E  3009               	movlw	9
   519     067F  00F3               	movwf	LCD_Print_Bytes@len
   520     0680  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   521     0681  120A  118A  2582  120A  118A  	fcall	_LCD_Print_Bytes
   522     0686                     l1017:
   523     0686                     l1019:
   524                           
   525                           ;main.c: 49:         Send_Byte_Data(memor_address_l);
   526     0686  3031               	movlw	49
   527     0687  00F0               	movwf	I2C_Init@clock_init_value
   528     0688  3000               	movlw	0
   529     0689  00F1               	movwf	I2C_Init@clock_init_value+1
   530     068A  120A  118A  24EB  120A  118A  	fcall	_I2C_Init
   531     068F                     l1021:
   532                           
   533                           ;main.c: 51:         Stop_Bit();
   534     068F  30A0               	movlw	160
   535     0690  1283               	bcf	3,5	;RP0=0, select bank0
   536     0691  1303               	bcf	3,6	;RP1=0, select bank0
   537     0692  00A4               	movwf	main@slave_address_w
   538     0693                     l1023:
   539                           
   540                           ;main.c: 52: 
   541     0693  30A1               	movlw	161
   542     0694  00A3               	movwf	main@slave_address_r
   543     0695                     l1025:
   544                           
   545                           ;main.c: 53:         LCD_Control(0x86);
   546     0695  3011               	movlw	17
   547     0696  00A5               	movwf	main@memor_address_h
   548     0697                     l1027:
   549                           
   550                           ;main.c: 54:         if (data_to_write >= 100) LCD_Print_Byte((data_to_write / 100) + '0
      +                          ');
   551     0697  01A6               	clrf	main@memor_address_l
   552     0698  0AA6               	incf	main@memor_address_l,f
   553                           
   554                           ;main.c: 56:         LCD_Print_Byte((data_to_write % 10) + '0');
   555     0699  01A8               	clrf	main@data_to_write
   556     069A                     l1029:
   557                           
   558                           ;main.c: 60:         Start_Bit();
   559     069A  120A  118A  251E  120A  118A  	fcall	_Start_Bit
   560     069F                     l1031:
   561                           
   562                           ;main.c: 61:         Send_Byte_Data(slave_address_w);
   563     069F  1283               	bcf	3,5	;RP0=0, select bank0
   564     06A0  1303               	bcf	3,6	;RP1=0, select bank0
   565     06A1  0824               	movf	main@slave_address_w,w
   566     06A2  120A  118A  2553  120A  118A  	fcall	_Send_Byte_Data
   567     06A7                     l1033:
   568                           
   569                           ;main.c: 62:         Send_Byte_Data(memor_address_h);
   570     06A7  1283               	bcf	3,5	;RP0=0, select bank0
   571     06A8  1303               	bcf	3,6	;RP1=0, select bank0
   572     06A9  0825               	movf	main@memor_address_h,w
   573     06AA  120A  118A  2553  120A  118A  	fcall	_Send_Byte_Data
   574     06AF                     l1035:
   575                           
   576                           ;main.c: 63:         Send_Byte_Data(memor_address_l);
   577     06AF  1283               	bcf	3,5	;RP0=0, select bank0
   578     06B0  1303               	bcf	3,6	;RP1=0, select bank0
   579     06B1  0826               	movf	main@memor_address_l,w
   580     06B2  120A  118A  2553  120A  118A  	fcall	_Send_Byte_Data
   581     06B7                     l1037:
   582                           
   583                           ;main.c: 64: 
   584     06B7  1283               	bcf	3,5	;RP0=0, select bank0
   585     06B8  1303               	bcf	3,6	;RP1=0, select bank0
   586     06B9  0828               	movf	main@data_to_write,w
   587     06BA  120A  118A  2553  120A  118A  	fcall	_Send_Byte_Data
   588     06BF                     l1039:
   589                           
   590                           ;main.c: 65:         Repeated_Start();
   591     06BF  120A  118A  2513  120A  118A  	fcall	_Stop_Bit
   592     06C4                     l1041:
   593                           
   594                           ;main.c: 67:         received_data = Receive_Byte_Data();
   595     06C4  3086               	movlw	134
   596     06C5  120A  118A  2529  120A  118A  	fcall	_LCD_Control
   597     06CA                     l1043:
   598                           
   599                           ;main.c: 68:         Send_NACK_Bit();
   600     06CA  3064               	movlw	100
   601     06CB  1283               	bcf	3,5	;RP0=0, select bank0
   602     06CC  1303               	bcf	3,6	;RP1=0, select bank0
   603     06CD  0228               	subwf	main@data_to_write,w
   604     06CE  1C03               	skipc
   605     06CF  2ED1               	goto	u601
   606     06D0  2ED2               	goto	u600
   607     06D1                     u601:
   608     06D1  2EE9               	goto	l1047
   609     06D2                     u600:
   610     06D2                     l1045:
   611     06D2  3064               	movlw	100
   612     06D3  00F0               	movwf	___awdiv@divisor
   613     06D4  3000               	movlw	0
   614     06D5  00F1               	movwf	___awdiv@divisor+1
   615     06D6  0828               	movf	main@data_to_write,w
   616     06D7  00A0               	movwf	??_main
   617     06D8  01A1               	clrf	??_main+1
   618     06D9  0820               	movf	??_main,w
   619     06DA  00F2               	movwf	___awdiv@dividend
   620     06DB  0821               	movf	??_main+1,w
   621     06DC  00F3               	movwf	___awdiv@dividend+1
   622     06DD  120A  118A  25F6  120A  118A  	fcall	___awdiv
   623     06E2  0870               	movf	?___awdiv,w
   624     06E3  3E30               	addlw	48
   625     06E4  120A  118A  253E  120A  118A  	fcall	_LCD_Print_Byte
   626     06E9                     l1047:
   627                           
   628                           ;main.c: 69:         Stop_Bit();
   629     06E9  300A               	movlw	10
   630     06EA  1283               	bcf	3,5	;RP0=0, select bank0
   631     06EB  1303               	bcf	3,6	;RP1=0, select bank0
   632     06EC  0228               	subwf	main@data_to_write,w
   633     06ED  1C03               	skipc
   634     06EE  2EF0               	goto	u611
   635     06EF  2EF1               	goto	u610
   636     06F0                     u611:
   637     06F0  2F15               	goto	l53
   638     06F1                     u610:
   639     06F1                     l1049:
   640     06F1  300A               	movlw	10
   641     06F2  00F8               	movwf	___awmod@divisor
   642     06F3  3000               	movlw	0
   643     06F4  00F9               	movwf	___awmod@divisor+1
   644     06F5  300A               	movlw	10
   645     06F6  00F0               	movwf	___awdiv@divisor
   646     06F7  3000               	movlw	0
   647     06F8  00F1               	movwf	___awdiv@divisor+1
   648     06F9  0828               	movf	main@data_to_write,w
   649     06FA  00A0               	movwf	??_main
   650     06FB  01A1               	clrf	??_main+1
   651     06FC  0820               	movf	??_main,w
   652     06FD  00F2               	movwf	___awdiv@dividend
   653     06FE  0821               	movf	??_main+1,w
   654     06FF  00F3               	movwf	___awdiv@dividend+1
   655     0700  120A  118A  25F6  120A  118A  	fcall	___awdiv
   656     0705  0871               	movf	?___awdiv+1,w
   657     0706  00FB               	movwf	___awmod@dividend+1
   658     0707  0870               	movf	?___awdiv,w
   659     0708  00FA               	movwf	___awmod@dividend
   660     0709  120A  118A  259D  120A  118A  	fcall	___awmod
   661     070E  0878               	movf	?___awmod,w
   662     070F  3E30               	addlw	48
   663     0710  120A  118A  253E  120A  118A  	fcall	_LCD_Print_Byte
   664     0715                     l53:
   665                           
   666                           ;main.c: 70: 
   667     0715  300A               	movlw	10
   668     0716  00F8               	movwf	___awmod@divisor
   669     0717  3000               	movlw	0
   670     0718  00F9               	movwf	___awmod@divisor+1
   671     0719  1283               	bcf	3,5	;RP0=0, select bank0
   672     071A  1303               	bcf	3,6	;RP1=0, select bank0
   673     071B  0828               	movf	main@data_to_write,w
   674     071C  00A0               	movwf	??_main
   675     071D  01A1               	clrf	??_main+1
   676     071E  0820               	movf	??_main,w
   677     071F  00FA               	movwf	___awmod@dividend
   678     0720  0821               	movf	??_main+1,w
   679     0721  00FB               	movwf	___awmod@dividend+1
   680     0722  120A  118A  259D  120A  118A  	fcall	___awmod
   681     0727  0878               	movf	?___awmod,w
   682     0728  3E30               	addlw	48
   683     0729  120A  118A  253E  120A  118A  	fcall	_LCD_Print_Byte
   684     072E                     l1051:
   685                           
   686                           ;main.c: 72:         if (received_data >= 100) LCD_Print_Byte((received_data / 100) + '0
      +                          ');
   687     072E  301A               	movlw	26
   688     072F  1283               	bcf	3,5	;RP0=0, select bank0
   689     0730  1303               	bcf	3,6	;RP1=0, select bank0
   690     0731  00A2               	movwf	??_main+2
   691     0732  305E               	movlw	94
   692     0733  00A1               	movwf	??_main+1
   693     0734  306D               	movlw	109
   694     0735  00A0               	movwf	??_main
   695     0736                     u647:
   696     0736  0BA0               	decfsz	??_main,f
   697     0737  2F36               	goto	u647
   698     0738  0BA1               	decfsz	??_main+1,f
   699     0739  2F36               	goto	u647
   700     073A  0BA2               	decfsz	??_main+2,f
   701     073B  2F36               	goto	u647
   702     073C  2F3D               	nop2
   703     073D                     l1053:
   704                           
   705                           ;main.c: 74:         LCD_Print_Byte((received_data % 10) + '0');
   706     073D  120A  118A  251E  120A  118A  	fcall	_Start_Bit
   707     0742                     l1055:
   708                           
   709                           ;main.c: 75: 
   710     0742  1283               	bcf	3,5	;RP0=0, select bank0
   711     0743  1303               	bcf	3,6	;RP1=0, select bank0
   712     0744  0824               	movf	main@slave_address_w,w
   713     0745  120A  118A  2553  120A  118A  	fcall	_Send_Byte_Data
   714     074A                     l1057:
   715                           
   716                           ;main.c: 76:         data_to_write++;
   717     074A  1283               	bcf	3,5	;RP0=0, select bank0
   718     074B  1303               	bcf	3,6	;RP1=0, select bank0
   719     074C  0825               	movf	main@memor_address_h,w
   720     074D  120A  118A  2553  120A  118A  	fcall	_Send_Byte_Data
   721     0752                     l1059:
   722                           
   723                           ;main.c: 77:         _delay((unsigned long)((1000)*(20000000/4000.0)));
   724     0752  1283               	bcf	3,5	;RP0=0, select bank0
   725     0753  1303               	bcf	3,6	;RP1=0, select bank0
   726     0754  0826               	movf	main@memor_address_l,w
   727     0755  120A  118A  2553  120A  118A  	fcall	_Send_Byte_Data
   728     075A                     l1061:
   729                           
   730                           ;main.c: 79: 
   731     075A  120A  118A  2508  120A  118A  	fcall	_Repeated_Start
   732     075F                     l1063:
   733                           
   734                           ;main.c: 80:     return;
   735     075F  1283               	bcf	3,5	;RP0=0, select bank0
   736     0760  1303               	bcf	3,6	;RP1=0, select bank0
   737     0761  0823               	movf	main@slave_address_r,w
   738     0762  120A  118A  2553  120A  118A  	fcall	_Send_Byte_Data
   739     0767                     l1065:
   740                           
   741                           ;main.c: 81: }
   742     0767  120A  118A  24FD  120A  118A  	fcall	_Receive_Byte_Data
   743     076C  1283               	bcf	3,5	;RP0=0, select bank0
   744     076D  1303               	bcf	3,6	;RP1=0, select bank0
   745     076E  00A7               	movwf	main@received_data
   746     076F                     l1067:
   747                           
   748                           ;main.c: 82: 
   749     076F  120A  118A  24F4  120A  118A  	fcall	_Send_NACK_Bit
   750     0774                     l1069:
   751                           
   752                           ;main.c: 83: void I2C_Init(int clock_init_value) {
   753     0774  120A  118A  2513  120A  118A  	fcall	_Stop_Bit
   754     0779                     l1071:
   755                           
   756                           ;main.c: 85:     SSPCON = 0x28;
   757     0779  30C9               	movlw	201
   758     077A  120A  118A  2529  120A  118A  	fcall	_LCD_Control
   759     077F                     l1073:
   760                           
   761                           ;main.c: 86: }
   762     077F  3064               	movlw	100
   763     0780  1283               	bcf	3,5	;RP0=0, select bank0
   764     0781  1303               	bcf	3,6	;RP1=0, select bank0
   765     0782  0227               	subwf	main@received_data,w
   766     0783  1C03               	skipc
   767     0784  2F86               	goto	u621
   768     0785  2F87               	goto	u620
   769     0786                     u621:
   770     0786  2F9E               	goto	l1077
   771     0787                     u620:
   772     0787                     l1075:
   773     0787  3064               	movlw	100
   774     0788  00F0               	movwf	___awdiv@divisor
   775     0789  3000               	movlw	0
   776     078A  00F1               	movwf	___awdiv@divisor+1
   777     078B  0827               	movf	main@received_data,w
   778     078C  00A0               	movwf	??_main
   779     078D  01A1               	clrf	??_main+1
   780     078E  0820               	movf	??_main,w
   781     078F  00F2               	movwf	___awdiv@dividend
   782     0790  0821               	movf	??_main+1,w
   783     0791  00F3               	movwf	___awdiv@dividend+1
   784     0792  120A  118A  25F6  120A  118A  	fcall	___awdiv
   785     0797  0870               	movf	?___awdiv,w
   786     0798  3E30               	addlw	48
   787     0799  120A  118A  253E  120A  118A  	fcall	_LCD_Print_Byte
   788     079E                     l1077:
   789                           
   790                           ;main.c: 87: void Start_Bit() {
   791     079E  300A               	movlw	10
   792     079F  1283               	bcf	3,5	;RP0=0, select bank0
   793     07A0  1303               	bcf	3,6	;RP1=0, select bank0
   794     07A1  0227               	subwf	main@received_data,w
   795     07A2  1C03               	skipc
   796     07A3  2FA5               	goto	u631
   797     07A4  2FA6               	goto	u630
   798     07A5                     u631:
   799     07A5  2FCA               	goto	l55
   800     07A6                     u630:
   801     07A6                     l1079:
   802     07A6  300A               	movlw	10
   803     07A7  00F8               	movwf	___awmod@divisor
   804     07A8  3000               	movlw	0
   805     07A9  00F9               	movwf	___awmod@divisor+1
   806     07AA  300A               	movlw	10
   807     07AB  00F0               	movwf	___awdiv@divisor
   808     07AC  3000               	movlw	0
   809     07AD  00F1               	movwf	___awdiv@divisor+1
   810     07AE  0827               	movf	main@received_data,w
   811     07AF  00A0               	movwf	??_main
   812     07B0  01A1               	clrf	??_main+1
   813     07B1  0820               	movf	??_main,w
   814     07B2  00F2               	movwf	___awdiv@dividend
   815     07B3  0821               	movf	??_main+1,w
   816     07B4  00F3               	movwf	___awdiv@dividend+1
   817     07B5  120A  118A  25F6  120A  118A  	fcall	___awdiv
   818     07BA  0871               	movf	?___awdiv+1,w
   819     07BB  00FB               	movwf	___awmod@dividend+1
   820     07BC  0870               	movf	?___awdiv,w
   821     07BD  00FA               	movwf	___awmod@dividend
   822     07BE  120A  118A  259D  120A  118A  	fcall	___awmod
   823     07C3  0878               	movf	?___awmod,w
   824     07C4  3E30               	addlw	48
   825     07C5  120A  118A  253E  120A  118A  	fcall	_LCD_Print_Byte
   826     07CA                     l55:
   827                           
   828                           ;main.c: 88:     SSPCON2bits.SEN = 1;
   829     07CA  300A               	movlw	10
   830     07CB  00F8               	movwf	___awmod@divisor
   831     07CC  3000               	movlw	0
   832     07CD  00F9               	movwf	___awmod@divisor+1
   833     07CE  1283               	bcf	3,5	;RP0=0, select bank0
   834     07CF  1303               	bcf	3,6	;RP1=0, select bank0
   835     07D0  0827               	movf	main@received_data,w
   836     07D1  00A0               	movwf	??_main
   837     07D2  01A1               	clrf	??_main+1
   838     07D3  0820               	movf	??_main,w
   839     07D4  00FA               	movwf	___awmod@dividend
   840     07D5  0821               	movf	??_main+1,w
   841     07D6  00FB               	movwf	___awmod@dividend+1
   842     07D7  120A  118A  259D  120A  118A  	fcall	___awmod
   843     07DC  0878               	movf	?___awmod,w
   844     07DD  3E30               	addlw	48
   845     07DE  120A  118A  253E  120A  118A  	fcall	_LCD_Print_Byte
   846     07E3                     l1081:
   847                           
   848                           ;main.c: 90:     PIR1bits.SSPIF = 0;
   849     07E3  3001               	movlw	1
   850     07E4  00FF               	movwf	btemp+1
   851     07E5  087F               	movf	btemp+1,w
   852     07E6  1283               	bcf	3,5	;RP0=0, select bank0
   853     07E7  1303               	bcf	3,6	;RP1=0, select bank0
   854     07E8  07A8               	addwf	main@data_to_write,f
   855     07E9                     l1083:
   856                           
   857                           ;main.c: 91: }
   858     07E9  301A               	movlw	26
   859     07EA  1283               	bcf	3,5	;RP0=0, select bank0
   860     07EB  1303               	bcf	3,6	;RP1=0, select bank0
   861     07EC  00A2               	movwf	??_main+2
   862     07ED  305E               	movlw	94
   863     07EE  00A1               	movwf	??_main+1
   864     07EF  306D               	movlw	109
   865     07F0  00A0               	movwf	??_main
   866     07F1                     u657:
   867     07F1  0BA0               	decfsz	??_main,f
   868     07F2  2FF1               	goto	u657
   869     07F3  0BA1               	decfsz	??_main+1,f
   870     07F4  2FF1               	goto	u657
   871     07F5  0BA2               	decfsz	??_main+2,f
   872     07F6  2FF1               	goto	u657
   873     07F7  2FF8               	nop2
   874     07F8  2E9A               	goto	l1029
   875     07F9  120A  118A  2800   	ljmp	start
   876     07FC                     __end_of_main:
   877                           
   878                           	psect	text1
   879     059D                     __ptext1:	
   880 ;; *************** function ___awmod *****************
   881 ;; Defined at:
   882 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
   883 ;; Parameters:    Size  Location     Type
   884 ;;  divisor         2    8[COMMON] int 
   885 ;;  dividend        2   10[COMMON] int 
   886 ;; Auto vars:     Size  Location     Type
   887 ;;  sign            1   13[COMMON] unsigned char 
   888 ;;  counter         1   12[COMMON] unsigned char 
   889 ;; Return value:  Size  Location     Type
   890 ;;                  2    8[COMMON] int 
   891 ;; Registers used:
   892 ;;		wreg, status,2, status,0, btemp+1
   893 ;; Tracked objects:
   894 ;;		On entry : 0/0
   895 ;;		On exit  : 0/0
   896 ;;		Unchanged: 0/0
   897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   898 ;;      Params:         4       0       0       0       0
   899 ;;      Locals:         2       0       0       0       0
   900 ;;      Temps:          0       0       0       0       0
   901 ;;      Totals:         6       0       0       0       0
   902 ;;Total ram usage:        6 bytes
   903 ;; Hardware stack levels used: 1
   904 ;; This function calls:
   905 ;;		Nothing
   906 ;; This function is called by:
   907 ;;		_main
   908 ;; This function uses a non-reentrant model
   909 ;;
   910                           
   911     059D                     ___awmod:	
   912                           ;psect for function ___awmod
   913                           
   914     059D                     l961:	
   915                           ;incstack = 0
   916                           ; Regs used in ___awmod: [wreg+status,2+status,0+btemp+1]
   917                           
   918     059D  01FD               	clrf	___awmod@sign
   919     059E                     l963:
   920     059E  1FFB               	btfss	___awmod@dividend+1,7
   921     059F  2DA1               	goto	u511
   922     05A0  2DA2               	goto	u510
   923     05A1                     u511:
   924     05A1  2DA9               	goto	l969
   925     05A2                     u510:
   926     05A2                     l965:
   927     05A2  09FA               	comf	___awmod@dividend,f
   928     05A3  09FB               	comf	___awmod@dividend+1,f
   929     05A4  0AFA               	incf	___awmod@dividend,f
   930     05A5  1903               	skipnz
   931     05A6  0AFB               	incf	___awmod@dividend+1,f
   932     05A7                     l967:
   933     05A7  01FD               	clrf	___awmod@sign
   934     05A8  0AFD               	incf	___awmod@sign,f
   935     05A9                     l969:
   936     05A9  1FF9               	btfss	___awmod@divisor+1,7
   937     05AA  2DAC               	goto	u521
   938     05AB  2DAD               	goto	u520
   939     05AC                     u521:
   940     05AC  2DB2               	goto	l973
   941     05AD                     u520:
   942     05AD                     l971:
   943     05AD  09F8               	comf	___awmod@divisor,f
   944     05AE  09F9               	comf	___awmod@divisor+1,f
   945     05AF  0AF8               	incf	___awmod@divisor,f
   946     05B0  1903               	skipnz
   947     05B1  0AF9               	incf	___awmod@divisor+1,f
   948     05B2                     l973:
   949     05B2  0878               	movf	___awmod@divisor,w
   950     05B3  0479               	iorwf	___awmod@divisor+1,w
   951     05B4  1903               	btfsc	3,2
   952     05B5  2DB7               	goto	u531
   953     05B6  2DB8               	goto	u530
   954     05B7                     u531:
   955     05B7  2DE7               	goto	l991
   956     05B8                     u530:
   957     05B8                     l975:
   958     05B8  01FC               	clrf	___awmod@counter
   959     05B9  0AFC               	incf	___awmod@counter,f
   960     05BA  2DC6               	goto	l981
   961     05BB                     l977:
   962     05BB  3001               	movlw	1
   963     05BC                     u545:
   964     05BC  1003               	clrc
   965     05BD  0DF8               	rlf	___awmod@divisor,f
   966     05BE  0DF9               	rlf	___awmod@divisor+1,f
   967     05BF  3EFF               	addlw	-1
   968     05C0  1D03               	skipz
   969     05C1  2DBC               	goto	u545
   970     05C2                     l979:
   971     05C2  3001               	movlw	1
   972     05C3  00FF               	movwf	btemp+1
   973     05C4  087F               	movf	btemp+1,w
   974     05C5  07FC               	addwf	___awmod@counter,f
   975     05C6                     l981:
   976     05C6  1FF9               	btfss	___awmod@divisor+1,7
   977     05C7  2DC9               	goto	u551
   978     05C8  2DCA               	goto	u550
   979     05C9                     u551:
   980     05C9  2DBB               	goto	l977
   981     05CA                     u550:
   982     05CA                     l983:
   983     05CA  0879               	movf	___awmod@divisor+1,w
   984     05CB  027B               	subwf	___awmod@dividend+1,w
   985     05CC  1D03               	skipz
   986     05CD  2DD0               	goto	u565
   987     05CE  0878               	movf	___awmod@divisor,w
   988     05CF  027A               	subwf	___awmod@dividend,w
   989     05D0                     u565:
   990     05D0  1C03               	skipc
   991     05D1  2DD3               	goto	u561
   992     05D2  2DD4               	goto	u560
   993     05D3                     u561:
   994     05D3  2DDA               	goto	l987
   995     05D4                     u560:
   996     05D4                     l985:
   997     05D4  0878               	movf	___awmod@divisor,w
   998     05D5  02FA               	subwf	___awmod@dividend,f
   999     05D6  0879               	movf	___awmod@divisor+1,w
  1000     05D7  1C03               	skipc
  1001     05D8  03FB               	decf	___awmod@dividend+1,f
  1002     05D9  02FB               	subwf	___awmod@dividend+1,f
  1003     05DA                     l987:
  1004     05DA  3001               	movlw	1
  1005     05DB                     u575:
  1006     05DB  1003               	clrc
  1007     05DC  0CF9               	rrf	___awmod@divisor+1,f
  1008     05DD  0CF8               	rrf	___awmod@divisor,f
  1009     05DE  3EFF               	addlw	-1
  1010     05DF  1D03               	skipz
  1011     05E0  2DDB               	goto	u575
  1012     05E1                     l989:
  1013     05E1  3001               	movlw	1
  1014     05E2  02FC               	subwf	___awmod@counter,f
  1015     05E3  1D03               	btfss	3,2
  1016     05E4  2DE6               	goto	u581
  1017     05E5  2DE7               	goto	u580
  1018     05E6                     u581:
  1019     05E6  2DCA               	goto	l983
  1020     05E7                     u580:
  1021     05E7                     l991:
  1022     05E7  087D               	movf	___awmod@sign,w
  1023     05E8  1903               	btfsc	3,2
  1024     05E9  2DEB               	goto	u591
  1025     05EA  2DEC               	goto	u590
  1026     05EB                     u591:
  1027     05EB  2DF1               	goto	l995
  1028     05EC                     u590:
  1029     05EC                     l993:
  1030     05EC  09FA               	comf	___awmod@dividend,f
  1031     05ED  09FB               	comf	___awmod@dividend+1,f
  1032     05EE  0AFA               	incf	___awmod@dividend,f
  1033     05EF  1903               	skipnz
  1034     05F0  0AFB               	incf	___awmod@dividend+1,f
  1035     05F1                     l995:
  1036     05F1  087B               	movf	___awmod@dividend+1,w
  1037     05F2  00F9               	movwf	?___awmod+1
  1038     05F3  087A               	movf	___awmod@dividend,w
  1039     05F4  00F8               	movwf	?___awmod
  1040     05F5                     l371:
  1041     05F5  0008               	return
  1042     05F6                     __end_of___awmod:
  1043                           
  1044                           	psect	text2
  1045     05F6                     __ptext2:	
  1046 ;; *************** function ___awdiv *****************
  1047 ;; Defined at:
  1048 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  1049 ;; Parameters:    Size  Location     Type
  1050 ;;  divisor         2    0[COMMON] int 
  1051 ;;  dividend        2    2[COMMON] int 
  1052 ;; Auto vars:     Size  Location     Type
  1053 ;;  quotient        2    6[COMMON] int 
  1054 ;;  sign            1    5[COMMON] unsigned char 
  1055 ;;  counter         1    4[COMMON] unsigned char 
  1056 ;; Return value:  Size  Location     Type
  1057 ;;                  2    0[COMMON] int 
  1058 ;; Registers used:
  1059 ;;		wreg, status,2, status,0, btemp+1
  1060 ;; Tracked objects:
  1061 ;;		On entry : 0/0
  1062 ;;		On exit  : 0/0
  1063 ;;		Unchanged: 0/0
  1064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1065 ;;      Params:         4       0       0       0       0
  1066 ;;      Locals:         4       0       0       0       0
  1067 ;;      Temps:          0       0       0       0       0
  1068 ;;      Totals:         8       0       0       0       0
  1069 ;;Total ram usage:        8 bytes
  1070 ;; Hardware stack levels used: 1
  1071 ;; This function calls:
  1072 ;;		Nothing
  1073 ;; This function is called by:
  1074 ;;		_main
  1075 ;; This function uses a non-reentrant model
  1076 ;;
  1077                           
  1078     05F6                     ___awdiv:	
  1079                           ;psect for function ___awdiv
  1080                           
  1081     05F6                     l917:	
  1082                           ;incstack = 0
  1083                           ; Regs used in ___awdiv: [wreg+status,2+status,0+btemp+1]
  1084                           
  1085     05F6  01F5               	clrf	___awdiv@sign
  1086     05F7                     l919:
  1087     05F7  1FF1               	btfss	___awdiv@divisor+1,7
  1088     05F8  2DFA               	goto	u411
  1089     05F9  2DFB               	goto	u410
  1090     05FA                     u411:
  1091     05FA  2E02               	goto	l925
  1092     05FB                     u410:
  1093     05FB                     l921:
  1094     05FB  09F0               	comf	___awdiv@divisor,f
  1095     05FC  09F1               	comf	___awdiv@divisor+1,f
  1096     05FD  0AF0               	incf	___awdiv@divisor,f
  1097     05FE  1903               	skipnz
  1098     05FF  0AF1               	incf	___awdiv@divisor+1,f
  1099     0600                     l923:
  1100     0600  01F5               	clrf	___awdiv@sign
  1101     0601  0AF5               	incf	___awdiv@sign,f
  1102     0602                     l925:
  1103     0602  1FF3               	btfss	___awdiv@dividend+1,7
  1104     0603  2E05               	goto	u421
  1105     0604  2E06               	goto	u420
  1106     0605                     u421:
  1107     0605  2E0F               	goto	l931
  1108     0606                     u420:
  1109     0606                     l927:
  1110     0606  09F2               	comf	___awdiv@dividend,f
  1111     0607  09F3               	comf	___awdiv@dividend+1,f
  1112     0608  0AF2               	incf	___awdiv@dividend,f
  1113     0609  1903               	skipnz
  1114     060A  0AF3               	incf	___awdiv@dividend+1,f
  1115     060B                     l929:
  1116     060B  3001               	movlw	1
  1117     060C  00FF               	movwf	btemp+1
  1118     060D  087F               	movf	btemp+1,w
  1119     060E  06F5               	xorwf	___awdiv@sign,f
  1120     060F                     l931:
  1121     060F  01F6               	clrf	___awdiv@quotient
  1122     0610  01F7               	clrf	___awdiv@quotient+1
  1123     0611                     l933:
  1124     0611  0870               	movf	___awdiv@divisor,w
  1125     0612  0471               	iorwf	___awdiv@divisor+1,w
  1126     0613  1903               	btfsc	3,2
  1127     0614  2E16               	goto	u431
  1128     0615  2E17               	goto	u430
  1129     0616                     u431:
  1130     0616  2E4E               	goto	l953
  1131     0617                     u430:
  1132     0617                     l935:
  1133     0617  01F4               	clrf	___awdiv@counter
  1134     0618  0AF4               	incf	___awdiv@counter,f
  1135     0619  2E25               	goto	l941
  1136     061A                     l937:
  1137     061A  3001               	movlw	1
  1138     061B                     u445:
  1139     061B  1003               	clrc
  1140     061C  0DF0               	rlf	___awdiv@divisor,f
  1141     061D  0DF1               	rlf	___awdiv@divisor+1,f
  1142     061E  3EFF               	addlw	-1
  1143     061F  1D03               	skipz
  1144     0620  2E1B               	goto	u445
  1145     0621                     l939:
  1146     0621  3001               	movlw	1
  1147     0622  00FF               	movwf	btemp+1
  1148     0623  087F               	movf	btemp+1,w
  1149     0624  07F4               	addwf	___awdiv@counter,f
  1150     0625                     l941:
  1151     0625  1FF1               	btfss	___awdiv@divisor+1,7
  1152     0626  2E28               	goto	u451
  1153     0627  2E29               	goto	u450
  1154     0628                     u451:
  1155     0628  2E1A               	goto	l937
  1156     0629                     u450:
  1157     0629                     l943:
  1158     0629  3001               	movlw	1
  1159     062A                     u465:
  1160     062A  1003               	clrc
  1161     062B  0DF6               	rlf	___awdiv@quotient,f
  1162     062C  0DF7               	rlf	___awdiv@quotient+1,f
  1163     062D  3EFF               	addlw	-1
  1164     062E  1D03               	skipz
  1165     062F  2E2A               	goto	u465
  1166     0630  0871               	movf	___awdiv@divisor+1,w
  1167     0631  0273               	subwf	___awdiv@dividend+1,w
  1168     0632  1D03               	skipz
  1169     0633  2E36               	goto	u475
  1170     0634  0870               	movf	___awdiv@divisor,w
  1171     0635  0272               	subwf	___awdiv@dividend,w
  1172     0636                     u475:
  1173     0636  1C03               	skipc
  1174     0637  2E39               	goto	u471
  1175     0638  2E3A               	goto	u470
  1176     0639                     u471:
  1177     0639  2E41               	goto	l949
  1178     063A                     u470:
  1179     063A                     l945:
  1180     063A  0870               	movf	___awdiv@divisor,w
  1181     063B  02F2               	subwf	___awdiv@dividend,f
  1182     063C  0871               	movf	___awdiv@divisor+1,w
  1183     063D  1C03               	skipc
  1184     063E  03F3               	decf	___awdiv@dividend+1,f
  1185     063F  02F3               	subwf	___awdiv@dividend+1,f
  1186     0640                     l947:
  1187     0640  1476               	bsf	___awdiv@quotient,0
  1188     0641                     l949:
  1189     0641  3001               	movlw	1
  1190     0642                     u485:
  1191     0642  1003               	clrc
  1192     0643  0CF1               	rrf	___awdiv@divisor+1,f
  1193     0644  0CF0               	rrf	___awdiv@divisor,f
  1194     0645  3EFF               	addlw	-1
  1195     0646  1D03               	skipz
  1196     0647  2E42               	goto	u485
  1197     0648                     l951:
  1198     0648  3001               	movlw	1
  1199     0649  02F4               	subwf	___awdiv@counter,f
  1200     064A  1D03               	btfss	3,2
  1201     064B  2E4D               	goto	u491
  1202     064C  2E4E               	goto	u490
  1203     064D                     u491:
  1204     064D  2E29               	goto	l943
  1205     064E                     u490:
  1206     064E                     l953:
  1207     064E  0875               	movf	___awdiv@sign,w
  1208     064F  1903               	btfsc	3,2
  1209     0650  2E52               	goto	u501
  1210     0651  2E53               	goto	u500
  1211     0652                     u501:
  1212     0652  2E58               	goto	l957
  1213     0653                     u500:
  1214     0653                     l955:
  1215     0653  09F6               	comf	___awdiv@quotient,f
  1216     0654  09F7               	comf	___awdiv@quotient+1,f
  1217     0655  0AF6               	incf	___awdiv@quotient,f
  1218     0656  1903               	skipnz
  1219     0657  0AF7               	incf	___awdiv@quotient+1,f
  1220     0658                     l957:
  1221     0658  0877               	movf	___awdiv@quotient+1,w
  1222     0659  00F1               	movwf	?___awdiv+1
  1223     065A  0876               	movf	___awdiv@quotient,w
  1224     065B  00F0               	movwf	?___awdiv
  1225     065C                     l358:
  1226     065C  0008               	return
  1227     065D                     __end_of___awdiv:
  1228                           
  1229                           	psect	text3
  1230     051E                     __ptext3:	
  1231 ;; *************** function _Start_Bit *****************
  1232 ;; Defined at:
  1233 ;;		line 101 in file "main.c"
  1234 ;; Parameters:    Size  Location     Type
  1235 ;;		None
  1236 ;; Auto vars:     Size  Location     Type
  1237 ;;		None
  1238 ;; Return value:  Size  Location     Type
  1239 ;;                  1    wreg      void 
  1240 ;; Registers used:
  1241 ;;		None
  1242 ;; Tracked objects:
  1243 ;;		On entry : 0/0
  1244 ;;		On exit  : 0/0
  1245 ;;		Unchanged: 0/0
  1246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1247 ;;      Params:         0       0       0       0       0
  1248 ;;      Locals:         0       0       0       0       0
  1249 ;;      Temps:          0       0       0       0       0
  1250 ;;      Totals:         0       0       0       0       0
  1251 ;;Total ram usage:        0 bytes
  1252 ;; Hardware stack levels used: 1
  1253 ;; This function calls:
  1254 ;;		Nothing
  1255 ;; This function is called by:
  1256 ;;		_main
  1257 ;; This function uses a non-reentrant model
  1258 ;;
  1259                           
  1260     051E                     _Start_Bit:	
  1261                           ;psect for function _Start_Bit
  1262                           
  1263     051E                     l901:	
  1264                           ;incstack = 0
  1265                           ; Regs used in _Start_Bit: []
  1266                           
  1267                           
  1268                           ;main.c: 102:     if (SSPCON2bits.ACKSTAT) {
  1269     051E  1683               	bsf	3,5	;RP0=1, select bank1
  1270     051F  1303               	bcf	3,6	;RP1=0, select bank1
  1271     0520  1411               	bsf	17,0	;volatile
  1272     0521                     l64:	
  1273                           ;main.c: 103:         Stop_Bit();
  1274                           
  1275     0521  1811               	btfsc	17,0	;volatile
  1276     0522  2D24               	goto	u351
  1277     0523  2D25               	goto	u350
  1278     0524                     u351:
  1279     0524  2D21               	goto	l64
  1280     0525                     u350:
  1281     0525                     l66:
  1282                           
  1283                           ;main.c: 104:     }
  1284     0525  1283               	bcf	3,5	;RP0=0, select bank0
  1285     0526  1303               	bcf	3,6	;RP1=0, select bank0
  1286     0527  118C               	bcf	12,3	;volatile
  1287     0528                     l67:
  1288     0528  0008               	return
  1289     0529                     __end_of_Start_Bit:
  1290                           
  1291                           	psect	text4
  1292     04F4                     __ptext4:	
  1293 ;; *************** function _Send_NACK_Bit *****************
  1294 ;; Defined at:
  1295 ;;		line 130 in file "main.c"
  1296 ;; Parameters:    Size  Location     Type
  1297 ;;		None
  1298 ;; Auto vars:     Size  Location     Type
  1299 ;;		None
  1300 ;; Return value:  Size  Location     Type
  1301 ;;                  1    wreg      void 
  1302 ;; Registers used:
  1303 ;;		None
  1304 ;; Tracked objects:
  1305 ;;		On entry : 0/0
  1306 ;;		On exit  : 0/0
  1307 ;;		Unchanged: 0/0
  1308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1309 ;;      Params:         0       0       0       0       0
  1310 ;;      Locals:         0       0       0       0       0
  1311 ;;      Temps:          0       0       0       0       0
  1312 ;;      Totals:         0       0       0       0       0
  1313 ;;Total ram usage:        0 bytes
  1314 ;; Hardware stack levels used: 1
  1315 ;; This function calls:
  1316 ;;		Nothing
  1317 ;; This function is called by:
  1318 ;;		_main
  1319 ;; This function uses a non-reentrant model
  1320 ;;
  1321                           
  1322     04F4                     _Send_NACK_Bit:	
  1323                           ;psect for function _Send_NACK_Bit
  1324                           
  1325     04F4                     l915:	
  1326                           ;incstack = 0
  1327                           ; Regs used in _Send_NACK_Bit: []
  1328                           
  1329                           
  1330                           ;main.c: 131:     LCD_Control(0x01);
  1331     04F4  1683               	bsf	3,5	;RP0=1, select bank1
  1332     04F5  1303               	bcf	3,6	;RP1=0, select bank1
  1333     04F6  1691               	bsf	17,5	;volatile
  1334                           
  1335                           ;main.c: 132: }
  1336     04F7  1611               	bsf	17,4	;volatile
  1337     04F8                     l95:	
  1338                           ;main.c: 133: void LCD_Print_Byte(unsigned char data) {
  1339                           
  1340     04F8  1A11               	btfsc	17,4	;volatile
  1341     04F9  2CFB               	goto	u401
  1342     04FA  2CFC               	goto	u400
  1343     04FB                     u401:
  1344     04FB  2CF8               	goto	l95
  1345     04FC                     u400:
  1346     04FC                     l98:
  1347     04FC  0008               	return
  1348     04FD                     __end_of_Send_NACK_Bit:
  1349                           
  1350                           	psect	text5
  1351     0553                     __ptext5:	
  1352 ;; *************** function _Send_Byte_Data *****************
  1353 ;; Defined at:
  1354 ;;		line 111 in file "main.c"
  1355 ;; Parameters:    Size  Location     Type
  1356 ;;  data            1    wreg     unsigned char 
  1357 ;; Auto vars:     Size  Location     Type
  1358 ;;  data            1    0[COMMON] unsigned char 
  1359 ;; Return value:  Size  Location     Type
  1360 ;;                  1    wreg      void 
  1361 ;; Registers used:
  1362 ;;		wreg, status,2, status,0, pclath, cstack
  1363 ;; Tracked objects:
  1364 ;;		On entry : 0/0
  1365 ;;		On exit  : 0/0
  1366 ;;		Unchanged: 0/0
  1367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1368 ;;      Params:         0       0       0       0       0
  1369 ;;      Locals:         1       0       0       0       0
  1370 ;;      Temps:          0       0       0       0       0
  1371 ;;      Totals:         1       0       0       0       0
  1372 ;;Total ram usage:        1 bytes
  1373 ;; Hardware stack levels used: 1
  1374 ;; Hardware stack levels required when called: 1
  1375 ;; This function calls:
  1376 ;;		_Stop_Bit
  1377 ;; This function is called by:
  1378 ;;		_main
  1379 ;; This function uses a non-reentrant model
  1380 ;;
  1381                           
  1382     0553                     _Send_Byte_Data:	
  1383                           ;psect for function _Send_Byte_Data
  1384                           
  1385                           
  1386                           ;incstack = 0
  1387                           ; Regs used in _Send_Byte_Data: [wreg+status,2+status,0+pclath+cstack]
  1388                           ;Send_Byte_Data@data stored from wreg
  1389     0553  00F0               	movwf	Send_Byte_Data@data
  1390     0554                     l903:
  1391                           
  1392                           ;main.c: 112:     SSPCON2bits.ACKDT = 0;
  1393     0554  0870               	movf	Send_Byte_Data@data,w
  1394     0555  1283               	bcf	3,5	;RP0=0, select bank0
  1395     0556  1303               	bcf	3,6	;RP1=0, select bank0
  1396     0557  0093               	movwf	19	;volatile
  1397     0558                     l76:	
  1398                           ;main.c: 113:     SSPCON2bits.ACKEN = 1;
  1399                           
  1400     0558  1D8C               	btfss	12,3	;volatile
  1401     0559  2D5B               	goto	u361
  1402     055A  2D5C               	goto	u360
  1403     055B                     u361:
  1404     055B  2D58               	goto	l76
  1405     055C                     u360:
  1406     055C                     l78:
  1407                           
  1408                           ;main.c: 114:     while (SSPCON2bits.ACKEN);
  1409     055C  118C               	bcf	12,3	;volatile
  1410                           
  1411                           ;main.c: 116: void Send_NACK_Bit() {
  1412     055D  1683               	bsf	3,5	;RP0=1, select bank1
  1413     055E  1303               	bcf	3,6	;RP1=0, select bank1
  1414     055F  1F11               	btfss	17,6	;volatile
  1415     0560  2D62               	goto	u371
  1416     0561  2D63               	goto	u370
  1417     0562                     u371:
  1418     0562  2D68               	goto	l80
  1419     0563                     u370:
  1420     0563                     l905:
  1421                           
  1422                           ;main.c: 117:     SSPCON2bits.ACKDT = 1;
  1423     0563  120A  118A  2513  120A  118A  	fcall	_Stop_Bit
  1424     0568                     l80:
  1425     0568  0008               	return
  1426     0569                     __end_of_Send_Byte_Data:
  1427                           
  1428                           	psect	text6
  1429     0513                     __ptext6:	
  1430 ;; *************** function _Stop_Bit *****************
  1431 ;; Defined at:
  1432 ;;		line 135 in file "main.c"
  1433 ;; Parameters:    Size  Location     Type
  1434 ;;		None
  1435 ;; Auto vars:     Size  Location     Type
  1436 ;;		None
  1437 ;; Return value:  Size  Location     Type
  1438 ;;                  1    wreg      void 
  1439 ;; Registers used:
  1440 ;;		None
  1441 ;; Tracked objects:
  1442 ;;		On entry : 0/0
  1443 ;;		On exit  : 0/0
  1444 ;;		Unchanged: 0/0
  1445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1446 ;;      Params:         0       0       0       0       0
  1447 ;;      Locals:         0       0       0       0       0
  1448 ;;      Temps:          0       0       0       0       0
  1449 ;;      Totals:         0       0       0       0       0
  1450 ;;Total ram usage:        0 bytes
  1451 ;; Hardware stack levels used: 1
  1452 ;; This function calls:
  1453 ;;		Nothing
  1454 ;; This function is called by:
  1455 ;;		_main
  1456 ;;		_Send_Byte_Data
  1457 ;; This function uses a non-reentrant model
  1458 ;;
  1459                           
  1460     0513                     _Stop_Bit:	
  1461                           ;psect for function _Stop_Bit
  1462                           
  1463     0513                     l881:	
  1464                           ;incstack = 0
  1465                           ; Regs used in _Stop_Bit: []
  1466                           
  1467                           
  1468                           ;main.c: 136:     PORTBbits.RB4 = 0;
  1469     0513  1683               	bsf	3,5	;RP0=1, select bank1
  1470     0514  1303               	bcf	3,6	;RP1=0, select bank1
  1471     0515  1511               	bsf	17,2	;volatile
  1472     0516                     l101:	
  1473                           ;main.c: 137:     PORTD = data;
  1474                           
  1475     0516  1911               	btfsc	17,2	;volatile
  1476     0517  2D19               	goto	u331
  1477     0518  2D1A               	goto	u330
  1478     0519                     u331:
  1479     0519  2D16               	goto	l101
  1480     051A                     u330:
  1481     051A                     l103:
  1482                           
  1483                           ;main.c: 138:     _delay((unsigned long)((5)*(20000000/4000.0)));
  1484     051A  1283               	bcf	3,5	;RP0=0, select bank0
  1485     051B  1303               	bcf	3,6	;RP1=0, select bank0
  1486     051C  118C               	bcf	12,3	;volatile
  1487     051D                     l104:
  1488     051D  0008               	return
  1489     051E                     __end_of_Stop_Bit:
  1490                           
  1491                           	psect	text7
  1492     0508                     __ptext7:	
  1493 ;; *************** function _Repeated_Start *****************
  1494 ;; Defined at:
  1495 ;;		line 106 in file "main.c"
  1496 ;; Parameters:    Size  Location     Type
  1497 ;;		None
  1498 ;; Auto vars:     Size  Location     Type
  1499 ;;		None
  1500 ;; Return value:  Size  Location     Type
  1501 ;;                  1    wreg      void 
  1502 ;; Registers used:
  1503 ;;		None
  1504 ;; Tracked objects:
  1505 ;;		On entry : 0/0
  1506 ;;		On exit  : 0/0
  1507 ;;		Unchanged: 0/0
  1508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1509 ;;      Params:         0       0       0       0       0
  1510 ;;      Locals:         0       0       0       0       0
  1511 ;;      Temps:          0       0       0       0       0
  1512 ;;      Totals:         0       0       0       0       0
  1513 ;;Total ram usage:        0 bytes
  1514 ;; Hardware stack levels used: 1
  1515 ;; This function calls:
  1516 ;;		Nothing
  1517 ;; This function is called by:
  1518 ;;		_main
  1519 ;; This function uses a non-reentrant model
  1520 ;;
  1521                           
  1522     0508                     _Repeated_Start:	
  1523                           ;psect for function _Repeated_Start
  1524                           
  1525     0508                     l907:	
  1526                           ;incstack = 0
  1527                           ; Regs used in _Repeated_Start: []
  1528                           
  1529                           
  1530                           ;main.c: 107:     SSPCON2bits.RCEN = 1;
  1531     0508  1683               	bsf	3,5	;RP0=1, select bank1
  1532     0509  1303               	bcf	3,6	;RP1=0, select bank1
  1533     050A  1491               	bsf	17,1	;volatile
  1534     050B                     l70:	
  1535                           ;main.c: 108:     while (!SSPSTATbits.BF);
  1536                           
  1537     050B  1891               	btfsc	17,1	;volatile
  1538     050C  2D0E               	goto	u381
  1539     050D  2D0F               	goto	u380
  1540     050E                     u381:
  1541     050E  2D0B               	goto	l70
  1542     050F                     u380:
  1543     050F                     l72:
  1544                           
  1545                           ;main.c: 109:     return SSPBUF;
  1546     050F  1283               	bcf	3,5	;RP0=0, select bank0
  1547     0510  1303               	bcf	3,6	;RP1=0, select bank0
  1548     0511  118C               	bcf	12,3	;volatile
  1549     0512                     l73:
  1550     0512  0008               	return
  1551     0513                     __end_of_Repeated_Start:
  1552                           
  1553                           	psect	text8
  1554     04FD                     __ptext8:	
  1555 ;; *************** function _Receive_Byte_Data *****************
  1556 ;; Defined at:
  1557 ;;		line 120 in file "main.c"
  1558 ;; Parameters:    Size  Location     Type
  1559 ;;		None
  1560 ;; Auto vars:     Size  Location     Type
  1561 ;;		None
  1562 ;; Return value:  Size  Location     Type
  1563 ;;                  1    wreg      unsigned char 
  1564 ;; Registers used:
  1565 ;;		wreg
  1566 ;; Tracked objects:
  1567 ;;		On entry : 0/0
  1568 ;;		On exit  : 0/0
  1569 ;;		Unchanged: 0/0
  1570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1571 ;;      Params:         0       0       0       0       0
  1572 ;;      Locals:         0       0       0       0       0
  1573 ;;      Temps:          0       0       0       0       0
  1574 ;;      Totals:         0       0       0       0       0
  1575 ;;Total ram usage:        0 bytes
  1576 ;; Hardware stack levels used: 1
  1577 ;; This function calls:
  1578 ;;		Nothing
  1579 ;; This function is called by:
  1580 ;;		_main
  1581 ;; This function uses a non-reentrant model
  1582 ;;
  1583                           
  1584     04FD                     _Receive_Byte_Data:	
  1585                           ;psect for function _Receive_Byte_Data
  1586                           
  1587     04FD                     l909:	
  1588                           ;incstack = 0
  1589                           ; Regs used in _Receive_Byte_Data: [wreg]
  1590                           
  1591                           
  1592                           ;main.c: 121: void Stop_Bit() {
  1593     04FD  1683               	bsf	3,5	;RP0=1, select bank1
  1594     04FE  1303               	bcf	3,6	;RP1=0, select bank1
  1595     04FF  1591               	bsf	17,3	;volatile
  1596     0500                     l83:	
  1597                           ;main.c: 122:     SSPCON2bits.PEN = 1;
  1598                           
  1599     0500  1C14               	btfss	20,0	;volatile
  1600     0501  2D03               	goto	u391
  1601     0502  2D04               	goto	u390
  1602     0503                     u391:
  1603     0503  2D00               	goto	l83
  1604     0504                     u390:
  1605     0504                     l911:
  1606                           
  1607                           ;main.c: 123:     while (SSPCON2bits.PEN);
  1608     0504  1283               	bcf	3,5	;RP0=0, select bank0
  1609     0505  1303               	bcf	3,6	;RP1=0, select bank0
  1610     0506  0813               	movf	19,w	;volatile
  1611     0507                     l86:
  1612     0507  0008               	return
  1613     0508                     __end_of_Receive_Byte_Data:
  1614                           
  1615                           	psect	text9
  1616     0582                     __ptext9:	
  1617 ;; *************** function _LCD_Print_Bytes *****************
  1618 ;; Defined at:
  1619 ;;		line 155 in file "main.c"
  1620 ;; Parameters:    Size  Location     Type
  1621 ;;  str             1    wreg     PTR const unsigned char 
  1622 ;;		 -> STR_2(10), STR_1(7), 
  1623 ;;  len             1    3[COMMON] unsigned char 
  1624 ;; Auto vars:     Size  Location     Type
  1625 ;;  str             1    4[COMMON] PTR const unsigned char 
  1626 ;;		 -> STR_2(10), STR_1(7), 
  1627 ;;  i               1    5[COMMON] unsigned char 
  1628 ;; Return value:  Size  Location     Type
  1629 ;;                  1    wreg      void 
  1630 ;; Registers used:
  1631 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1632 ;; Tracked objects:
  1633 ;;		On entry : 0/0
  1634 ;;		On exit  : 0/0
  1635 ;;		Unchanged: 0/0
  1636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1637 ;;      Params:         1       0       0       0       0
  1638 ;;      Locals:         2       0       0       0       0
  1639 ;;      Temps:          0       0       0       0       0
  1640 ;;      Totals:         3       0       0       0       0
  1641 ;;Total ram usage:        3 bytes
  1642 ;; Hardware stack levels used: 1
  1643 ;; Hardware stack levels required when called: 1
  1644 ;; This function calls:
  1645 ;;		_LCD_Print_Byte
  1646 ;; This function is called by:
  1647 ;;		_main
  1648 ;; This function uses a non-reentrant model
  1649 ;;
  1650                           
  1651     0582                     _LCD_Print_Bytes:	
  1652                           ;psect for function _LCD_Print_Bytes
  1653                           
  1654                           
  1655                           ;incstack = 0
  1656                           ; Regs used in _LCD_Print_Bytes: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1657                           ;LCD_Print_Bytes@str stored from wreg
  1658     0582  00F4               	movwf	LCD_Print_Bytes@str
  1659     0583                     l891:
  1660     0583  01F5               	clrf	LCD_Print_Bytes@i
  1661     0584  2D96               	goto	l897
  1662     0585                     l893:
  1663     0585  0875               	movf	LCD_Print_Bytes@i,w
  1664     0586  0774               	addwf	LCD_Print_Bytes@str,w
  1665     0587  0084               	movwf	4
  1666     0588  120A  118A  2003  120A  118A  	fcall	stringdir
  1667     058D  120A  118A  253E  120A  118A  	fcall	_LCD_Print_Byte
  1668     0592                     l895:
  1669     0592  3001               	movlw	1
  1670     0593  00FF               	movwf	btemp+1
  1671     0594  087F               	movf	btemp+1,w
  1672     0595  07F5               	addwf	LCD_Print_Bytes@i,f
  1673     0596                     l897:
  1674     0596  0873               	movf	LCD_Print_Bytes@len,w
  1675     0597  0275               	subwf	LCD_Print_Bytes@i,w
  1676     0598  1C03               	skipc
  1677     0599  2D9B               	goto	u341
  1678     059A  2D9C               	goto	u340
  1679     059B                     u341:
  1680     059B  2D85               	goto	l893
  1681     059C                     u340:
  1682     059C                     l116:
  1683     059C  0008               	return
  1684     059D                     __end_of_LCD_Print_Bytes:
  1685                           
  1686                           	psect	text10
  1687     053E                     __ptext10:	
  1688 ;; *************** function _LCD_Print_Byte *****************
  1689 ;; Defined at:
  1690 ;;		line 147 in file "main.c"
  1691 ;; Parameters:    Size  Location     Type
  1692 ;;  data            1    wreg     unsigned char 
  1693 ;; Auto vars:     Size  Location     Type
  1694 ;;  data            1    2[COMMON] unsigned char 
  1695 ;; Return value:  Size  Location     Type
  1696 ;;                  1    wreg      void 
  1697 ;; Registers used:
  1698 ;;		wreg
  1699 ;; Tracked objects:
  1700 ;;		On entry : 0/0
  1701 ;;		On exit  : 0/0
  1702 ;;		Unchanged: 0/0
  1703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1704 ;;      Params:         0       0       0       0       0
  1705 ;;      Locals:         1       0       0       0       0
  1706 ;;      Temps:          2       0       0       0       0
  1707 ;;      Totals:         3       0       0       0       0
  1708 ;;Total ram usage:        3 bytes
  1709 ;; Hardware stack levels used: 1
  1710 ;; This function calls:
  1711 ;;		Nothing
  1712 ;; This function is called by:
  1713 ;;		_main
  1714 ;;		_LCD_Print_Bytes
  1715 ;; This function uses a non-reentrant model
  1716 ;;
  1717                           
  1718     053E                     _LCD_Print_Byte:	
  1719                           ;psect for function _LCD_Print_Byte
  1720                           
  1721                           
  1722                           ;incstack = 0
  1723                           ; Regs used in _LCD_Print_Byte: [wreg]
  1724                           ;LCD_Print_Byte@data stored from wreg
  1725     053E  00F2               	movwf	LCD_Print_Byte@data
  1726     053F                     l883:
  1727                           
  1728                           ;main.c: 148:     PORTBbits.RB5 = 1;
  1729     053F  1283               	bcf	3,5	;RP0=0, select bank0
  1730     0540  1303               	bcf	3,6	;RP1=0, select bank0
  1731     0541  1686               	bsf	6,5	;volatile
  1732                           
  1733                           ;main.c: 149:     PORTBbits.RB3 = 0;
  1734     0542  1586               	bsf	6,3	;volatile
  1735                           
  1736                           ;main.c: 150:     PORTBbits.RB4 = 0;
  1737     0543  1206               	bcf	6,4	;volatile
  1738     0544                     l885:
  1739                           
  1740                           ;main.c: 151:     PORTD = cmd;
  1741     0544  0872               	movf	LCD_Print_Byte@data,w
  1742     0545  0088               	movwf	8	;volatile
  1743                           
  1744                           ;main.c: 152:     _delay((unsigned long)((5)*(20000000/4000.0)));
  1745     0546  3021               	movlw	33
  1746     0547  00F1               	movwf	??_LCD_Print_Byte+1
  1747     0548  3076               	movlw	118
  1748     0549  00F0               	movwf	??_LCD_Print_Byte
  1749     054A                     u667:
  1750     054A  0BF0               	decfsz	??_LCD_Print_Byte,f
  1751     054B  2D4A               	goto	u667
  1752     054C  0BF1               	decfsz	??_LCD_Print_Byte+1,f
  1753     054D  2D4A               	goto	u667
  1754     054E  0000               	nop
  1755     054F                     l887:
  1756                           
  1757                           ;main.c: 153:     PORTBbits.RB5 = 0;
  1758     054F  1283               	bcf	3,5	;RP0=0, select bank0
  1759     0550  1303               	bcf	3,6	;RP1=0, select bank0
  1760     0551  1286               	bcf	6,5	;volatile
  1761     0552                     l110:
  1762     0552  0008               	return
  1763     0553                     __end_of_LCD_Print_Byte:
  1764                           
  1765                           	psect	text11
  1766     0569                     __ptext11:	
  1767 ;; *************** function _LCD_Init *****************
  1768 ;; Defined at:
  1769 ;;		line 141 in file "main.c"
  1770 ;; Parameters:    Size  Location     Type
  1771 ;;		None
  1772 ;; Auto vars:     Size  Location     Type
  1773 ;;		None
  1774 ;; Return value:  Size  Location     Type
  1775 ;;                  1    wreg      void 
  1776 ;; Registers used:
  1777 ;;		wreg, status,2, status,0, pclath, cstack
  1778 ;; Tracked objects:
  1779 ;;		On entry : 0/0
  1780 ;;		On exit  : 0/0
  1781 ;;		Unchanged: 0/0
  1782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1783 ;;      Params:         0       0       0       0       0
  1784 ;;      Locals:         0       0       0       0       0
  1785 ;;      Temps:          0       0       0       0       0
  1786 ;;      Totals:         0       0       0       0       0
  1787 ;;Total ram usage:        0 bytes
  1788 ;; Hardware stack levels used: 1
  1789 ;; Hardware stack levels required when called: 1
  1790 ;; This function calls:
  1791 ;;		_LCD_Control
  1792 ;; This function is called by:
  1793 ;;		_main
  1794 ;; This function uses a non-reentrant model
  1795 ;;
  1796                           
  1797     0569                     _LCD_Init:	
  1798                           ;psect for function _LCD_Init
  1799                           
  1800     0569                     l889:	
  1801                           ;incstack = 0
  1802                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  1803                           
  1804                           
  1805                           ;main.c: 142:     unsigned char i;
  1806     0569  3038               	movlw	56
  1807     056A  120A  118A  2529  120A  118A  	fcall	_LCD_Control
  1808                           
  1809                           ;main.c: 143:     for (i=0; i<len; ++i) {
  1810     056F  3006               	movlw	6
  1811     0570  120A  118A  2529  120A  118A  	fcall	_LCD_Control
  1812                           
  1813                           ;main.c: 144:         LCD_Print_Byte(str[i]);
  1814     0575  300C               	movlw	12
  1815     0576  120A  118A  2529  120A  118A  	fcall	_LCD_Control
  1816                           
  1817                           ;main.c: 145:     }
  1818     057B  3001               	movlw	1
  1819     057C  120A  118A  2529  120A  118A  	fcall	_LCD_Control
  1820     0581                     l107:
  1821     0581  0008               	return
  1822     0582                     __end_of_LCD_Init:
  1823                           
  1824                           	psect	text12
  1825     0529                     __ptext12:	
  1826 ;; *************** function _LCD_Control *****************
  1827 ;; Defined at:
  1828 ;;		line 161 in file "main.c"
  1829 ;; Parameters:    Size  Location     Type
  1830 ;;  cmd             1    wreg     unsigned char 
  1831 ;; Auto vars:     Size  Location     Type
  1832 ;;  cmd             1    2[COMMON] unsigned char 
  1833 ;; Return value:  Size  Location     Type
  1834 ;;                  1    wreg      void 
  1835 ;; Registers used:
  1836 ;;		wreg
  1837 ;; Tracked objects:
  1838 ;;		On entry : 0/0
  1839 ;;		On exit  : 0/0
  1840 ;;		Unchanged: 0/0
  1841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1842 ;;      Params:         0       0       0       0       0
  1843 ;;      Locals:         1       0       0       0       0
  1844 ;;      Temps:          2       0       0       0       0
  1845 ;;      Totals:         3       0       0       0       0
  1846 ;;Total ram usage:        3 bytes
  1847 ;; Hardware stack levels used: 1
  1848 ;; This function calls:
  1849 ;;		Nothing
  1850 ;; This function is called by:
  1851 ;;		_main
  1852 ;;		_LCD_Init
  1853 ;; This function uses a non-reentrant model
  1854 ;;
  1855                           
  1856     0529                     _LCD_Control:	
  1857                           ;psect for function _LCD_Control
  1858                           
  1859                           
  1860                           ;incstack = 0
  1861                           ; Regs used in _LCD_Control: [wreg]
  1862                           ;LCD_Control@cmd stored from wreg
  1863     0529  00F2               	movwf	LCD_Control@cmd
  1864     052A                     l875:
  1865     052A  1283               	bcf	3,5	;RP0=0, select bank0
  1866     052B  1303               	bcf	3,6	;RP1=0, select bank0
  1867     052C  1686               	bsf	6,5	;volatile
  1868     052D  1186               	bcf	6,3	;volatile
  1869     052E  1206               	bcf	6,4	;volatile
  1870     052F                     l877:
  1871     052F  0872               	movf	LCD_Control@cmd,w
  1872     0530  0088               	movwf	8	;volatile
  1873     0531  3021               	movlw	33
  1874     0532  00F1               	movwf	??_LCD_Control+1
  1875     0533  3076               	movlw	118
  1876     0534  00F0               	movwf	??_LCD_Control
  1877     0535                     u677:
  1878     0535  0BF0               	decfsz	??_LCD_Control,f
  1879     0536  2D35               	goto	u677
  1880     0537  0BF1               	decfsz	??_LCD_Control+1,f
  1881     0538  2D35               	goto	u677
  1882     0539  0000               	nop
  1883     053A                     l879:
  1884     053A  1283               	bcf	3,5	;RP0=0, select bank0
  1885     053B  1303               	bcf	3,6	;RP1=0, select bank0
  1886     053C  1286               	bcf	6,5	;volatile
  1887     053D                     l119:
  1888     053D  0008               	return
  1889     053E                     __end_of_LCD_Control:
  1890                           
  1891                           	psect	text13
  1892     04EB                     __ptext13:	
  1893 ;; *************** function _I2C_Init *****************
  1894 ;; Defined at:
  1895 ;;		line 97 in file "main.c"
  1896 ;; Parameters:    Size  Location     Type
  1897 ;;  clock_init_v    2    0[COMMON] int 
  1898 ;; Auto vars:     Size  Location     Type
  1899 ;;		None
  1900 ;; Return value:  Size  Location     Type
  1901 ;;                  1    wreg      void 
  1902 ;; Registers used:
  1903 ;;		wreg
  1904 ;; Tracked objects:
  1905 ;;		On entry : 0/0
  1906 ;;		On exit  : 0/0
  1907 ;;		Unchanged: 0/0
  1908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1909 ;;      Params:         2       0       0       0       0
  1910 ;;      Locals:         0       0       0       0       0
  1911 ;;      Temps:          0       0       0       0       0
  1912 ;;      Totals:         2       0       0       0       0
  1913 ;;Total ram usage:        2 bytes
  1914 ;; Hardware stack levels used: 1
  1915 ;; This function calls:
  1916 ;;		Nothing
  1917 ;; This function is called by:
  1918 ;;		_main
  1919 ;; This function uses a non-reentrant model
  1920 ;;
  1921                           
  1922     04EB                     _I2C_Init:	
  1923                           ;psect for function _I2C_Init
  1924                           
  1925     04EB                     l899:	
  1926                           ;incstack = 0
  1927                           ; Regs used in _I2C_Init: [wreg]
  1928                           
  1929                           
  1930                           ;main.c: 98:     SSPBUF = data;
  1931     04EB  0870               	movf	I2C_Init@clock_init_value,w
  1932     04EC  1683               	bsf	3,5	;RP0=1, select bank1
  1933     04ED  1303               	bcf	3,6	;RP1=0, select bank1
  1934     04EE  0093               	movwf	19	;volatile
  1935                           
  1936                           ;main.c: 99:     while (!PIR1bits.SSPIF);
  1937     04EF  3028               	movlw	40
  1938     04F0  1283               	bcf	3,5	;RP0=0, select bank0
  1939     04F1  1303               	bcf	3,6	;RP1=0, select bank0
  1940     04F2  0094               	movwf	20	;volatile
  1941     04F3                     l61:
  1942     04F3  0008               	return
  1943     04F4                     __end_of_I2C_Init:
  1944     007E                     btemp	set	126	;btemp
  1945     007E                     wtemp0	set	126
  1946                           
  1947                           	psect	config
  1948                           
  1949                           ;Config register CONFIG @ 0x2007
  1950                           ;	Oscillator Selection bits
  1951                           ;	FOSC = HS, HS oscillator
  1952                           ;	Watchdog Timer Enable bit
  1953                           ;	WDTE = OFF, WDT disabled
  1954                           ;	Power-up Timer Enable bit
  1955                           ;	PWRTE = OFF, PWRT disabled
  1956                           ;	Brown-out Reset Enable bit
  1957                           ;	BOREN = OFF, BOR disabled
  1958                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1959                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  1960                           ;	Data EEPROM Memory Code Protection bit
  1961                           ;	CPD = OFF, Data EEPROM code protection off
  1962                           ;	Flash Program Memory Write Enable bits
  1963                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1964                           ;	In-Circuit Debugger Mode bit
  1965                           ;	DEBUG = 0x1, unprogrammed default
  1966                           ;	Flash Program Memory Code Protection bit
  1967                           ;	CP = OFF, Code protection off
  1968     2007                     	org	8199
  1969     2007  3FBA               	dw	16314

Data Sizes:
    Strings     17
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      9       9
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_Print_Bytes@str	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_1(CODE[7]), STR_2(CODE[10]), 


Critical Paths under _main in COMMON

    _main->___awmod
    ___awmod->___awdiv
    _LCD_Print_Bytes->_LCD_Print_Byte
    _LCD_Init->_LCD_Control

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0    2755
                                              0 BANK0      9     9      0
                           _I2C_Init
                        _LCD_Control
                           _LCD_Init
                     _LCD_Print_Byte
                    _LCD_Print_Bytes
                  _Receive_Byte_Data
                     _Repeated_Start
                     _Send_Byte_Data
                      _Send_NACK_Bit
                          _Start_Bit
                           _Stop_Bit
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     904
                                              8 COMMON     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     908
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Start_Bit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Send_NACK_Bit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Send_Byte_Data                                       1     1      0      22
                                              0 COMMON     1     1      0
                           _Stop_Bit
 ---------------------------------------------------------------------------------
 (1) _Stop_Bit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Repeated_Start                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Receive_Byte_Data                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_Print_Bytes                                      3     2      1     330
                                              3 COMMON     3     2      1
                     _LCD_Print_Byte
 ---------------------------------------------------------------------------------
 (2) _LCD_Print_Byte                                       3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             0     0      0      22
                        _LCD_Control
 ---------------------------------------------------------------------------------
 (2) _LCD_Control                                          3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Init                                             2     0      2      98
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Init
   _LCD_Control
   _LCD_Init
     _LCD_Control
   _LCD_Print_Byte
   _LCD_Print_Bytes
     _LCD_Print_Byte
   _Receive_Byte_Data
   _Repeated_Start
   _Send_Byte_Data
     _Stop_Bit
   _Send_NACK_Bit
   _Start_Bit
   _Stop_Bit
   ___awdiv
   ___awmod
     ___awdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      9       9       5       11.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Sat Apr 12 13:23:54 2025

                        pc 0002                _SSPSTATbits 0094                         l61 04F3  
                       l53 0715                         l70 050B                         l55 07CA  
                       l72 050F                         l80 0568                         l64 0521  
                       l73 0512                         l66 0525                         l83 0500  
                       l67 0528                         l76 0558                         l86 0507  
                       l78 055C                         l95 04F8                         l98 04FC  
             ___awdiv@sign 0075               ?_LCD_Control 0070                         fsr 0004  
                      l101 0516                        l110 0552                        l103 051A  
                      l104 051D                        l107 0581                        l116 059C  
                      l119 053D                        l371 05F5                        l358 065C  
                      l901 051E                        l911 0504                        l903 0554  
                      l905 0563                        l921 05FB                        l907 0508  
                      l915 04F4                        l931 060F                        l923 0600  
                      l909 04FD                        l941 0625                        l933 0611  
                      l925 0602                        l917 05F6                        l951 0648  
                      l943 0629                        l935 0617                        l927 0606  
                      l919 05F7                        l881 0513                        l945 063A  
                      l937 061A                        l953 064E                        l929 060B  
                      l961 059D                        l875 052A                        l883 053F  
                      l891 0583                        l955 0653                        l947 0640  
                      l939 0621                        l971 05AD                        l963 059E  
                      l877 052F                        l885 0544                        l893 0585  
                      l957 0658                        l949 0641                        l981 05C6  
                      l973 05B2                        l965 05A2                        l879 053A  
                      l887 054F                        l895 0592                        l983 05CA  
                      l975 05B8                        l991 05E7                        l967 05A7  
                      l889 0569                        l897 0596                        l993 05EC  
                      l985 05D4                        l977 05BB                        l969 05A9  
                      l899 04EB                        l995 05F1                        l987 05DA  
                      l979 05C2                        l989 05E1                        l999 065D  
                      u400 04FC                        u401 04FB                        u330 051A  
                      u410 05FB                        u331 0519                        u411 05FA  
                      u340 059C                        u500 0653                        u420 0606  
                      u341 059B                        u501 0652                        u421 0605  
                      u350 0525                        u430 0617                        u510 05A2  
                      u351 0524                        u431 0616                        u511 05A1  
                      u360 055C                        u520 05AD                        u600 06D2  
                      u361 055B                        u521 05AC                        u601 06D1  
                      u370 0563                        u450 0629                        u530 05B8  
                      u610 06F1                        u371 0562                        u451 0628  
                      u531 05B7                        u611 06F0                        u380 050F  
                      u620 0787                        u381 050E                        u445 061B  
                      u621 0786                        u390 0504                        u470 063A  
                      u550 05CA                        u630 07A6                        u391 0503  
                      u471 0639                        u551 05C9                        u631 07A5  
                      u560 05D4                        u465 062A                        u561 05D3  
                      u545 05BC                        u490 064E                        u491 064D  
                      u475 0636                        u580 05E7                        u485 0642  
                      u581 05E6                        u565 05D0                        u590 05EC  
                      u591 05EB                        u575 05DB                        u647 0736  
                      u657 07F1                        u667 054A                        u677 0535  
                      fsr0 0004               ___awmod@sign 007D            ?_Repeated_Start 0070  
                     l1001 0662                       l1011 0670                       l1003 0663  
                     l1021 068F                       l1013 0678                       l1005 0664  
                     l1031 069F                       l1023 0693                       l1015 067E  
                     l1007 0665                       l1041 06C4                       l1033 06A7  
                     l1025 0695                       l1017 0686                       l1009 066A  
                     l1051 072E                       l1043 06CA                       l1035 06AF  
                     l1027 0697                       l1019 0686                       l1061 075A  
                     l1053 073D                       l1045 06D2                       l1037 06B7  
                     l1029 069A                       l1071 0779                       l1063 075F  
                     l1055 0742                       l1047 06E9                       l1039 06BF  
                     l1081 07E3                       l1073 077F                       l1065 0767  
                     l1057 074A                       l1049 06F1                       l1083 07E9  
                     l1075 0787                       l1067 076F                       l1059 0752  
                     l1077 079E                       l1069 0774                       l1079 07A6  
                     STR_1 0013                       STR_2 0009                       _main 065D  
         __end_of_I2C_Init 04F4                       btemp 007E                       start 0000  
           _LCD_Print_Byte 053E        main@slave_address_r 0023        main@slave_address_w 0024  
         __end_of_LCD_Init 0582                      ?_main 0070            __end_of___awdiv 065D  
          __end_of___awmod 05F6            ___awdiv@divisor 0070            ___awdiv@counter 0074  
                    _PORTD 0008                      _TRISD 0088         LCD_Print_Byte@data 0072  
                    pclath 000A         LCD_Print_Bytes@len 0073         LCD_Print_Bytes@str 0074  
                    status 0003                      wtemp0 007E            __initialization 07FC  
   __end_of_LCD_Print_Byte 0553               __end_of_main 07FC                     ??_main 0020  
          _LCD_Print_Bytes 0582           ??_Send_Byte_Data 0070          main@received_data 0027  
         __end_of_Stop_Bit 051E           ___awdiv@dividend 0072                     _SSPADD 0093  
                   _SSPCON 0014                     _SSPBUF 0013            ?_LCD_Print_Byte 0070  
                ??___awdiv 0074                  ??___awmod 007C           ___awdiv@quotient 0076  
          ___awmod@divisor 0078            ___awmod@counter 007C                  ?_I2C_Init 0070  
  __end_of__initialization 07FC                  ?_LCD_Init 0070          _Receive_Byte_Data 04FD  
       ?_Receive_Byte_Data 0070             __pcstackCOMMON 0070    __end_of_LCD_Print_Bytes 059D  
      ??_Receive_Byte_Data 0070           ??_Repeated_Start 0070                 ??_I2C_Init 0072  
      main@memor_address_h 0025        main@memor_address_l 0026          main@data_to_write 0028  
__end_of_Receive_Byte_Data 0508                 ??_LCD_Init 0073              _Send_NACK_Bit 04F4  
               __pmaintext 065D          __end_of_Start_Bit 0529                  ?_Stop_Bit 0070  
               __stringtab 0003             ?_Send_NACK_Bit 0070           ?_LCD_Print_Bytes 0073  
                  ___awdiv 05F6                    ___awmod 059D                 ??_Stop_Bit 0070  
                  __ptext1 059D                    __ptext2 05F6                    __ptext3 051E  
                  __ptext4 04F4                    __ptext5 0553                    __ptext6 0513  
                  __ptext7 0508                    __ptext8 04FD                    __ptext9 0582  
         ___awmod@dividend 007A   I2C_Init@clock_init_value 0070       end_of_initialization 07FC  
         ??_LCD_Print_Byte 0070                  _PORTBbits 0006             LCD_Control@cmd 0072  
                _TRISBbits 0086                  _TRISCbits 0087            ??_Send_NACK_Bit 0070  
            ??_LCD_Control 0070        start_initialization 07FC                  _Start_Bit 051E  
      __end_of_LCD_Control 053E                  ___latbits 0002              __pcstackBANK0 0020  
                 ?___awdiv 0070                   ?___awmod 0078                  __pstrings 0003  
               ?_Start_Bit 0070                   _I2C_Init 04EB                   _LCD_Init 0569  
                 _PIR1bits 000C                _LCD_Control 0529                __stringbase 0008  
         LCD_Print_Bytes@i 0075             _Send_Byte_Data 0553                   _Stop_Bit 0513  
              ??_Start_Bit 0070         __end_of__stringtab 0009                   __ptext10 053E  
                 __ptext11 0569                   __ptext12 0529                   __ptext13 04EB  
   __end_of_Send_Byte_Data 0569      __end_of_Send_NACK_Bit 04FD         Send_Byte_Data@data 0070  
           _Repeated_Start 0508          ??_LCD_Print_Bytes 0074            ?_Send_Byte_Data 0070  
                stringcode 0003                   stringdir 0003                   stringtab 0003  
   __end_of_Repeated_Start 0513                _SSPCON2bits 0091  
